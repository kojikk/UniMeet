from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from handlers.states import RegistrationStates, VerificationStates
from database import Database
from config import PROFILE_LIMITS, DATABASE_URL

router = Router()
db = Database(DATABASE_URL)

def get_course_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞"""
    keyboard = []
    for i in range(1, 6):
        keyboard.append([InlineKeyboardButton(text=f"{i} –∫—É—Ä—Å", callback_data=f"course_{i}")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_preview_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–≤—å—é –∞–Ω–∫–µ—Ç—ã"""
    keyboard = [
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_profile")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_profile")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def format_profile(user_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞"""
    course_text = f"{user_data.get('course', '–ù–µ —É–∫–∞–∑–∞–Ω')} –∫—É—Ä—Å"
    major = user_data.get('major', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    age = user_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')
    name = user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    description = user_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    
    return f"""
üë§ **–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:**

üìö –ö—É—Ä—Å: {course_text}
üéì –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {major}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}
‚ú® –ò–º—è: {name}

üìù –û —Å–µ–±–µ:
{description}
"""

@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = await db.get_user(message.from_user.id)
    
    if user and user['verification_status'] == 'approved':
        await message.answer(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UniMeetingBot!\n\n"
            "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "/profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É\n"
            "/edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É"
        )
        return
    
    if user and user['verification_status'] == 'pending':
        await message.answer(
            "‚è≥ –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n"
            "–û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
        )
        return
    
    await message.answer(
        "üéì –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UniMeetingBot!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π —Å—Ä–µ–¥–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n"
        "–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É! üöÄ\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:",
        reply_markup=get_course_keyboard()
    )
    await state.set_state(RegistrationStates.course)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not user:
        await db.create_user(message.from_user.id)

@router.callback_query(F.data.startswith("course_"))
async def process_course(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞"""
    course = int(callback.data.split("_")[1])
    await state.update_data(course=course)
    
    await callback.message.edit_text(
        f"‚úÖ –ö—É—Ä—Å: {course}\n\n"
        "üéì –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:"
    )
    await state.set_state(RegistrationStates.major)

@router.message(RegistrationStates.major)
async def process_major(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    major = message.text.strip()
    
    if len(major) < PROFILE_LIMITS['major_min'] or len(major) > PROFILE_LIMITS['major_max']:
        await message.answer(f"‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç {PROFILE_LIMITS['major_min']} –¥–æ {PROFILE_LIMITS['major_max']} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(major=major)
    await message.answer(
        f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {major}\n\n"
        "üéÇ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 16 –¥–æ 30 –ª–µ—Ç):"
    )
    await state.set_state(RegistrationStates.age)

@router.message(RegistrationStates.age)
async def process_age(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(message.text.strip())
        if age < PROFILE_LIMITS['age_min'] or age > PROFILE_LIMITS['age_max']:
            await message.answer(f"‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {PROFILE_LIMITS['age_min']} –¥–æ {PROFILE_LIMITS['age_max']} –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º:")
        return
    
    await state.update_data(age=age)
    await message.answer(
        f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç: {age}\n\n"
        "‚ú® –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
    )
    await state.set_state(RegistrationStates.name)

@router.message(RegistrationStates.name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    name = message.text.strip()
    
    if len(name) < PROFILE_LIMITS['name_min'] or len(name) > PROFILE_LIMITS['name_max']:
        await message.answer(f"‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç {PROFILE_LIMITS['name_min']} –¥–æ {PROFILE_LIMITS['name_max']} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(name=name)
    await message.answer(
        f"‚úÖ –ò–º—è: {name}\n\n"
        f"üìù –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ! –û–ø–∏—à–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —É–≤–ª–µ—á–µ–Ω–∏—è, —á—Ç–æ –∏—â–µ—à—å –≤ –æ–±—â–µ–Ω–∏–∏ "
        f"(–¥–æ {PROFILE_LIMITS['description_max']} —Å–∏–º–≤–æ–ª–æ–≤):"
    )
    await state.set_state(RegistrationStates.description)

@router.message(RegistrationStates.description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    description = message.text.strip()
    
    if len(description) < PROFILE_LIMITS['description_min'] or len(description) > PROFILE_LIMITS['description_max']:
        await message.answer(f"‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç {PROFILE_LIMITS['description_min']} –¥–æ {PROFILE_LIMITS['description_max']} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(description=description)
    await message.answer(
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:"
    )
    await state.set_state(RegistrationStates.photo)

@router.message(RegistrationStates.photo, F.photo)
async def process_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    photo_file_id = message.photo[-1].file_id
    await state.update_data(photo_file_id=photo_file_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∞–Ω–∫–µ—Ç—ã
    user_data = await state.get_data()
    profile_text = format_profile(user_data)
    
    await message.answer_photo(
        photo=photo_file_id,
        caption=profile_text,
        reply_markup=get_preview_keyboard()
    )
    await state.set_state(RegistrationStates.preview)

@router.message(RegistrationStates.photo)
async def process_photo_invalid(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:")

@router.callback_query(F.data == "save_profile")
async def save_profile(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã"""
    user_data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
    await db.update_user(
        telegram_id=callback.from_user.id,
        name=user_data['name'],
        age=user_data['age'],
        course=user_data['course'],
        major=user_data['major'],
        description=user_data['description'],
        photo_file_id=user_data['photo_file_id']
    )
    
    await callback.message.edit_caption(
        caption="‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
        "üîç –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å–æ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–º –±–∏–ª–µ—Ç–æ–º:"
    )
    
    await state.set_state(VerificationStates.student_card_photo)

@router.callback_query(F.data == "edit_profile")
async def edit_profile_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã"""
    await callback.message.edit_text(
        "‚úèÔ∏è –•–æ—Ä–æ—à–æ! –î–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É.\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:",
        reply_markup=get_course_keyboard()
    )
    await state.set_state(RegistrationStates.course)

@router.message(VerificationStates.student_card_photo, F.photo)
async def process_verification_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    photo_file_id = message.photo[-1].file_id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    user = await db.get_user(message.from_user.id)
    await db.create_verification_request(user['id'], photo_file_id)
    
    await message.answer(
        "‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n\n"
        "‚è≥ –û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n"
        "–ú—ã —É–≤–µ–¥–æ–º–∏–º —Ç–µ–±—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞."
    )
    await state.clear()

@router.message(VerificationStates.student_card_photo)
async def process_verification_photo_invalid(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–º –±–∏–ª–µ—Ç–æ–º:")

@router.message(Command("profile"))
async def view_profile(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã"""
    user = await db.get_user(message.from_user.id)
    
    if not user or not user['name']:
        await message.answer("‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
        return
    
    profile_text = format_profile(user)
    
    if user['photo_file_id']:
        await message.answer_photo(
            photo=user['photo_file_id'],
            caption=profile_text
        )
    else:
        await message.answer(profile_text)

@router.message(Command("edit"))
async def edit_profile_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
    user = await db.get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
        return
    
    if user['verification_status'] == 'pending':
        await message.answer(
            "‚ùå –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –≤–æ –≤—Ä–µ–º—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n"
            "–î–æ–∂–¥–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )
        return
    
    await message.answer(
        "‚úèÔ∏è –î–∞–≤–∞–π –æ–±–Ω–æ–≤–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É!\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:",
        reply_markup=get_course_keyboard()
    )
    await state.set_state(RegistrationStates.course)

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from handlers.states import RegistrationStates, VerificationStates
from database import Database
from config import PROFILE_LIMITS, DATABASE_URL
from utils import is_admin

router = Router()
db = Database(DATABASE_URL)

def get_course_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞"""
    keyboard = []
    for i in range(1, 6):
        keyboard.append([InlineKeyboardButton(text=f"{i} –∫—É—Ä—Å", callback_data=f"course_{i}")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_preview_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–≤—å—é –∞–Ω–∫–µ—Ç—ã"""
    keyboard = [
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_profile")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_profile")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def format_profile(user_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞"""
    course_text = f"{user_data.get('course', '–ù–µ —É–∫–∞–∑–∞–Ω')} –∫—É—Ä—Å"
    major = user_data.get('major', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    age = user_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')
    name = user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    description = user_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    
    return f"""
üë§ **–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:**

üìö –ö—É—Ä—Å: {course_text}
üéì –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {major}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}
‚ú® –ò–º—è: {name}

üìù –û —Å–µ–±–µ:
{description}
"""

@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    from handlers.menu import get_main_menu_keyboard
    from handlers.admin import is_in_admin_mode
    
    user = await db.get_user(message.from_user.id)
    is_user_admin = is_admin(message)
    admin_mode = is_in_admin_mode(message.from_user.id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from handlers.menu import determine_user_state
    user_state = determine_user_state(user)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
    if user_state == 'approved':
        await message.answer(
            "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UniMeetingBot!**\n\n"
            "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
            "‚Ä¢ üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\n"
            "‚Ä¢ üîç –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤\n"
            "‚Ä¢ üéâ –£—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_main_menu_keyboard(user_state, is_user_admin, admin_mode)
        )
        return
    
    elif user_state == 'draft':
        await message.answer(
            "üìù **–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!**\n\n"
            "–ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –µ—â—ë –Ω–µ –ø–æ–¥–∞–Ω–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.\n\n"
            "**–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:**\n"
            "‚Ä¢ üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É\n"
            "‚Ä¢ ‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ üì§ –ü–æ–¥–∞—Ç—å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é\n\n"
            "–ü–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—É—á–∏—à—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø:",
            reply_markup=get_main_menu_keyboard(user_state, is_user_admin, admin_mode)
        )
        return
    
    elif user_state == 'pending':
        await message.answer(
            "‚è≥ **–ê–Ω–∫–µ—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏**\n\n"
            "–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
            "–û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n\n"
            "–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º:",
            reply_markup=get_main_menu_keyboard(user_state, is_user_admin, admin_mode)
        )
        return
    
    elif user_state == 'rejected':
        await message.answer(
            "‚ùå **–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
            "**–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
            "‚Ä¢ ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã\n"
            "‚Ä¢ üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Å—Ç—É–¥–±–∏–ª–µ—Ç–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=get_main_menu_keyboard(user_state, is_user_admin, admin_mode)
        )
        return
    
    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (user_state == 'new')
    # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —Å—Ä–∞–∑—É
    await message.answer(
        "üéì **–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UniMeetingBot!**\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π —Å—Ä–µ–¥–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n"
        "–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É! üöÄ\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:",
        reply_markup=get_course_keyboard()
    )
    await state.set_state(RegistrationStates.course)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not user:
        await db.create_user(message.from_user.id)

@router.callback_query(F.data.startswith("course_"))
async def process_course(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞"""
    course = int(callback.data.split("_")[1])
    await state.update_data(course=course)
    
    await callback.message.edit_text(
        f"‚úÖ –ö—É—Ä—Å: {course}\n\n"
        "üéì –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:"
    )
    await state.set_state(RegistrationStates.major)

@router.message(RegistrationStates.major)
async def process_major(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    major = message.text.strip()
    
    if len(major) < PROFILE_LIMITS['major_min'] or len(major) > PROFILE_LIMITS['major_max']:
        await message.answer(f"‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç {PROFILE_LIMITS['major_min']} –¥–æ {PROFILE_LIMITS['major_max']} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(major=major)
    await message.answer(
        f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {major}\n\n"
        "üéÇ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 16 –¥–æ 30 –ª–µ—Ç):"
    )
    await state.set_state(RegistrationStates.age)

@router.message(RegistrationStates.age)
async def process_age(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(message.text.strip())
        if age < PROFILE_LIMITS['age_min'] or age > PROFILE_LIMITS['age_max']:
            await message.answer(f"‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {PROFILE_LIMITS['age_min']} –¥–æ {PROFILE_LIMITS['age_max']} –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º:")
        return
    
    await state.update_data(age=age)
    await message.answer(
        f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç: {age}\n\n"
        "‚ú® –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
    )
    await state.set_state(RegistrationStates.name)

@router.message(RegistrationStates.name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    name = message.text.strip()
    
    if len(name) < PROFILE_LIMITS['name_min'] or len(name) > PROFILE_LIMITS['name_max']:
        await message.answer(f"‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç {PROFILE_LIMITS['name_min']} –¥–æ {PROFILE_LIMITS['name_max']} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(name=name)
    await message.answer(
        f"‚úÖ –ò–º—è: {name}\n\n"
        f"üìù –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ! –û–ø–∏—à–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —É–≤–ª–µ—á–µ–Ω–∏—è, —á—Ç–æ –∏—â–µ—à—å –≤ –æ–±—â–µ–Ω–∏–∏ "
        f"(–¥–æ {PROFILE_LIMITS['description_max']} —Å–∏–º–≤–æ–ª–æ–≤):"
    )
    await state.set_state(RegistrationStates.description)

@router.message(RegistrationStates.description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    description = message.text.strip()
    
    if len(description) < PROFILE_LIMITS['description_min'] or len(description) > PROFILE_LIMITS['description_max']:
        await message.answer(f"‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç {PROFILE_LIMITS['description_min']} –¥–æ {PROFILE_LIMITS['description_max']} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(description=description)
    await message.answer(
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:"
    )
    await state.set_state(RegistrationStates.photo)

@router.message(RegistrationStates.photo, F.photo)
async def process_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    photo_file_id = message.photo[-1].file_id
    await state.update_data(photo_file_id=photo_file_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∞–Ω–∫–µ—Ç—ã
    user_data = await state.get_data()
    profile_text = format_profile(user_data)
    
    await message.answer_photo(
        photo=photo_file_id,
        caption=profile_text,
        reply_markup=get_preview_keyboard()
    )
    await state.set_state(RegistrationStates.preview)

@router.message(RegistrationStates.photo)
async def process_photo_invalid(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:")

@router.callback_query(F.data == "save_profile")
async def save_profile(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã"""
    user_data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(callback.from_user.id)
    current_status = user['verification_status'] if user else 'not_requested'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
    await db.update_user(
        telegram_id=callback.from_user.id,
        name=user_data['name'],
        age=user_data['age'],
        course=user_data['course'],
        major=user_data['major'],
        description=user_data['description'],
        photo_file_id=user_data['photo_file_id']
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    from handlers.menu import determine_user_state
    user_updated = await db.get_user(callback.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    new_state = determine_user_state(user_updated)
    
    if current_status == 'approved':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω - –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
        await callback.message.edit_caption(
            caption="‚úÖ **–ê–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
            "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.\n\n"
            "–ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!"
        )
        # –ú–µ–Ω—é –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º - –æ–Ω–æ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ (approved)
        await state.clear()

    elif current_status == 'not_requested' and user and user.get('name') is None:
        # –≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã (new -> draft) - –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        await callback.message.edit_caption(
            caption="‚úÖ **–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!**\n\n"
            "–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫.\n\n"
            "**–ß—Ç–æ –¥–∞–ª—å—à–µ:**\n"
            "‚Ä¢ –ú–æ–∂–µ—à—å –µ—â—ë —Ä–∞–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"
            "‚Ä¢ –ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ - –ø–æ–¥–∞–π –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ (new -> draft)
        from handlers.menu import update_user_menu
        await update_user_menu(callback.message, new_state, callback.from_user.id)
        await state.clear()

    else:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã - –º–µ–Ω—é –ù–ï –º–µ–Ω—è–µ—Ç—Å—è
        await callback.message.edit_caption(
            caption="‚úÖ **–ê–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
            "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n"
            "–ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!"
        )
        # –ú–µ–Ω—é –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º - –æ–Ω–æ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ
        await state.clear()

@router.callback_query(F.data == "edit_profile")
async def edit_profile_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã"""
    await callback.message.edit_text(
        "‚úèÔ∏è –•–æ—Ä–æ—à–æ! –î–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É.\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:",
        reply_markup=get_course_keyboard()
    )
    await state.set_state(RegistrationStates.course)

@router.message(VerificationStates.student_card_photo, F.photo)
async def process_verification_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    from handlers.admin import notify_admins_about_verification
    from aiogram import Bot
    
    photo_file_id = message.photo[-1].file_id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    if user['verification_status'] == 'approved':
        await message.answer(
            "‚ÑπÔ∏è **–¢—ã —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!**\n\n"
            "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.\n"
            "–ú–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞."
        )
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    request_id = await db.create_verification_request(user['id'], photo_file_id)
    
    await message.answer(
        "‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n\n"
        "‚è≥ –û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n"
        "–ú—ã —É–≤–µ–¥–æ–º–∏–º —Ç–µ–±—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞."
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    bot = Bot.get_current()
    verification_data = {
        'name': user['name'],
        'course': user['course'],
        'major': user['major'],
        'id': request_id
    }
    await notify_admins_about_verification(bot, verification_data)
    
    await state.clear()

@router.message(VerificationStates.student_card_photo)
async def process_verification_photo_invalid(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–º –±–∏–ª–µ—Ç–æ–º:")

@router.message(Command("profile"))
async def view_profile(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã"""
    user = await db.get_user(message.from_user.id)
    
    if not user or not user['name']:
        await message.answer("‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
        return
    
    profile_text = format_profile(user)
    
    if user['photo_file_id']:
        await message.answer_photo(
            photo=user['photo_file_id'],
            caption=profile_text
        )
    else:
        await message.answer(profile_text)

def get_rejected_user_menu():
    """–ú–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–æ–π"""
    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="edit_start")],
        [InlineKeyboardButton(text="üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Å—Ç—É–¥–±–∏–ª–µ—Ç–∞", callback_data="resend_verification")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.message(Command("edit"))
async def edit_profile_command(message: Message, state: FSMContext = None):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
    user = await db.get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
        return
    
    if user['verification_status'] == 'pending':
        await message.answer(
            "‚ùå –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –≤–æ –≤—Ä–µ–º—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n"
            "–î–æ–∂–¥–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )
        return
    
    if user['verification_status'] == 'rejected':
        await message.answer(
            "‚ùå –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_rejected_user_menu()
        )
        return
    
    # –ï—Å–ª–∏ state –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω (–≤—ã–∑–æ–≤ –∏–∑ –º–µ–Ω—é), –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if state is None:
        from aiogram.fsm.context import FSMContext
        from aiogram import Bot
        bot = Bot.get_current()
        from aiogram.fsm.storage.base import StorageKey
        
        # –ü–æ–ª—É—á–∞–µ–º storage –∏–∑ dispatcher
        try:
            dispatcher = bot.dispatcher if hasattr(bot, 'dispatcher') else None
            storage = dispatcher.storage if dispatcher else None
            
            if storage:
                key = StorageKey(bot.id, message.from_user.id, message.from_user.id)
                state = FSMContext(storage, key)
            else:
                await message.answer("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É /edit")
                return
        except Exception as e:
            await message.answer("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É /edit")
            return
    
    await message.answer(
        "‚úèÔ∏è –î–∞–≤–∞–π –æ–±–Ω–æ–≤–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É!\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:",
        reply_markup=get_course_keyboard()
    )
    await state.set_state(RegistrationStates.course)

@router.callback_query(F.data == "edit_start")
async def edit_start_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã (callback)"""
    await callback.message.edit_text(
        "‚úèÔ∏è –î–∞–≤–∞–π –æ–±–Ω–æ–≤–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É!\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:",
        reply_markup=get_course_keyboard()
    )
    await state.set_state(RegistrationStates.course)

@router.callback_query(F.data == "resend_verification")
async def resend_verification_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    await callback.message.edit_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Å–æ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–º –±–∏–ª–µ—Ç–æ–º:\n\n"
        "–£–±–µ–¥–∏—Å—å, —á—Ç–æ:\n"
        "‚Ä¢ –§–æ—Ç–æ —á–µ—Ç–∫–æ–µ –∏ —Ä–∞–∑–±–æ—Ä—á–∏–≤–æ–µ\n"
        "‚Ä¢ –í–∏–¥–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–±–∏–ª–µ—Ç–∞\n"
        "‚Ä¢ –î–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ"
    )
    await state.set_state(VerificationStates.student_card_photo)

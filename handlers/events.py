from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
import logging

from database import Database
from config import DATABASE_URL
from utils import is_admin
from handlers.states import EventStates

router = Router()
db = Database(DATABASE_URL)
logger = logging.getLogger(__name__)

def get_events_list_keyboard(events, user_id=None):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    keyboard = []
    
    if not events:
        keyboard.append([InlineKeyboardButton(text="üì≠ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç", callback_data="no_events")])
    else:
        for event in events:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
            name = event['name'][:35] + "..." if len(event['name']) > 35 else event['name']
            keyboard.append([InlineKeyboardButton(
                text=f"üéâ {name}",
                callback_data=f"event_view_{event['id']}"
            )])
    
    keyboard.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="events_refresh")])
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="events_close")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_event_actions_keyboard(event_id, is_joined=False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º"""
    keyboard = []
    
    if is_joined:
        keyboard.append([InlineKeyboardButton(
            text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", 
            callback_data=f"event_leave_{event_id}"
        )])
    else:
        keyboard.append([InlineKeyboardButton(
            text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", 
            callback_data=f"event_join_{event_id}"
        )])
    
    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="events_list"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="events_close")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_admin_events_keyboard(events):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏"""
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    keyboard.append([InlineKeyboardButton(
        text="‚ûï –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", 
        callback_data="admin_event_create"
    )])
    
    if events:
        keyboard.append([InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏:", callback_data="dummy")])
        
        for event in events:
            status = "üü¢" if event['is_active'] else "üî¥"
            participants = event.get('participant_count', 0)
            name = event['name'][:25] + "..." if len(event['name']) > 25 else event['name']
            
            keyboard.append([InlineKeyboardButton(
                text=f"{status} {name} ({participants} —á–µ–ª.)",
                callback_data=f"admin_event_manage_{event['id']}"
            )])
    
    keyboard.append([
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_events_refresh"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_admin_event_manage_keyboard(event_id, is_active=True):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º"""
    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"admin_event_edit_name_{event_id}")],
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"admin_event_edit_desc_{event_id}")],
    ]
    
    if is_active:
        keyboard.append([InlineKeyboardButton(
            text="üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", 
            callback_data=f"admin_event_deactivate_{event_id}"
        )])
    else:
        keyboard.append([InlineKeyboardButton(
            text="üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", 
            callback_data=f"admin_event_activate_{event_id}"
        )])
    
    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="admin_events_list"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_event_delete_{event_id}")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def format_event_info(event, participant_count=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏"""
    if participant_count is None:
        participant_count = event.get('participant_count', 0)
    
    status = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if event['is_active'] else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ"
    created_date = event['created_at'][:10] if event['created_at'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    return f"""
üéâ **{event['name']}**

üìã **–û–ø–∏—Å–∞–Ω–∏–µ:**
{event['description']}

üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {participant_count}
üìÖ **–°–æ–∑–¥–∞–Ω–æ:** {created_date}
üìä **–°—Ç–∞—Ç—É—Å:** {status}
"""

# === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ===

@router.message(Command("events"))
async def events_list_command(message: Message):
    """–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    from handlers.menu import edit_or_send_message
    user = await db.get_user(message.from_user.id)
    
    if not user or user['verification_status'] != 'approved':
        await edit_or_send_message(message, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        return
    
    events = await db.get_active_events()
    
    await edit_or_send_message(
        message,
        f"üéâ **–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ({len(events)})**\n\n"
        "–í—ã–±–µ—Ä–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=get_events_list_keyboard(events, user['id'])
    )

@router.message(Command("my_events"))
async def my_events_command(message: Message):
    """–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    from handlers.menu import edit_or_send_message
    user = await db.get_user(message.from_user.id)
    
    if not user or user['verification_status'] != 'approved':
        await edit_or_send_message(message, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        return
    
    my_events = await db.get_user_events(user['id'])
    
    if not my_events:
        await edit_or_send_message(
            message,
            "üì≠ **–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /events —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è!"
        )
        return
    
    events_text = []
    for event in my_events:
        joined_date = event['joined_at'][:10] if event['joined_at'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        events_text.append(f"üéâ **{event['name']}**\nüìÖ –ó–∞–ø–∏—Å–∞–ª—Å—è: {joined_date}")
    
    await edit_or_send_message(
        message,
        f"üéâ **–¢–≤–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ({len(my_events)})**\n\n" + 
        "\n\n".join(events_text)
    )

# === CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

@router.callback_query(F.data == "events_list")
@router.callback_query(F.data == "events_refresh")
async def events_list_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    user = await db.get_user(callback.from_user.id)
    
    if not user or user['verification_status'] != 'approved':
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", show_alert=True)
        return
    
    events = await db.get_active_events()
    
    await callback.message.edit_text(
        f"üéâ **–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ({len(events)})**\n\n"
        "–í—ã–±–µ—Ä–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=get_events_list_keyboard(events, user['id'])
    )

@router.callback_query(F.data.startswith("event_view_"))
async def event_view_callback(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = int(callback.data.split("_")[2])
    user = await db.get_user(callback.from_user.id)
    
    if not user or user['verification_status'] != 'approved':
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", show_alert=True)
        return
    
    event = await db.get_event_by_id(event_id)
    if not event or not event['is_active']:
        await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.", show_alert=True)
        return
    
    is_joined = await db.is_user_joined_event(user['id'], event_id)
    event_text = format_event_info(event)
    
    await callback.message.edit_text(
        event_text,
        reply_markup=get_event_actions_keyboard(event_id, is_joined)
    )

@router.callback_query(F.data.startswith("event_join_"))
async def event_join_callback(callback: CallbackQuery):
    """–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
    event_id = int(callback.data.split("_")[2])
    user = await db.get_user(callback.from_user.id)
    
    if not user or user['verification_status'] != 'approved':
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", show_alert=True)
        return
    
    event = await db.get_event_by_id(event_id)
    if not event or not event['is_active']:
        await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True)
        return
    
    await db.join_event(user['id'], event_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    updated_event = await db.get_event_by_id(event_id)
    event_text = format_event_info(updated_event)
    
    await callback.message.edit_text(
        event_text,
        reply_markup=get_event_actions_keyboard(event_id, True)
    )
    
    await callback.answer("‚úÖ –¢—ã –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!", show_alert=False)
    logger.info(f"User {user['id']} joined event {event_id}")

@router.callback_query(F.data.startswith("event_leave_"))
async def event_leave_callback(callback: CallbackQuery):
    """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = int(callback.data.split("_")[2])
    user = await db.get_user(callback.from_user.id)
    
    if not user or user['verification_status'] != 'approved':
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", show_alert=True)
        return
    
    await db.leave_event(user['id'], event_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    updated_event = await db.get_event_by_id(event_id)
    if updated_event:
        event_text = format_event_info(updated_event)
        await callback.message.edit_text(
            event_text,
            reply_markup=get_event_actions_keyboard(event_id, False)
        )
    
    await callback.answer("‚ùå –¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.", show_alert=False)
    logger.info(f"User {user['id']} left event {event_id}")

@router.callback_query(F.data == "events_close")
async def events_close_callback(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    await callback.message.edit_text("‚úÖ –ú–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∑–∞–∫—Ä—ã—Ç–æ.")

@router.callback_query(F.data == "no_events")
async def no_events_callback(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç", show_alert=False)

# === –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ===

@router.message(Command("events_admin"))
async def admin_events_command(message: Message):
    """–ê–¥–º–∏–Ω—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    from handlers.menu import edit_or_send_message
    
    if not is_admin(message):
        await edit_or_send_message(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    events = await db.get_all_events()
    
    await edit_or_send_message(
        message,
        f"üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ ({len(events)})**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_events_keyboard(events)
    )

@router.callback_query(F.data == "admin_events_list")
@router.callback_query(F.data == "admin_events_refresh")
async def admin_events_list_callback(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not is_admin(callback):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    events = await db.get_all_events()
    
    await callback.message.edit_text(
        f"üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ ({len(events)})**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_events_keyboard(events)
    )

@router.callback_query(F.data == "admin_event_create")
async def admin_event_create_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    if not is_admin(callback):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∞–¥–º–∏–Ω —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è)
    try:
        bot = callback.bot
        dispatcher = getattr(bot, 'dispatcher', None)
        if dispatcher and hasattr(dispatcher, 'storage'):
            storage = dispatcher.storage
            from aiogram.fsm.storage.base import StorageKey
            key = StorageKey(bot.id, callback.from_user.id, callback.from_user.id)
            
            await storage.set_state(key, None)
            await storage.set_data(key, {})
    except Exception:
        pass
    
    await callback.message.edit_text(
        "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è**\n\n"
        "–í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã.\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):"
    )
    await state.set_state(EventStates.name)

@router.message(EventStates.name)
async def process_event_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    name = message.text.strip()
    
    if len(name) < 5 or len(name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 5 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(name=name)
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: **{name}**\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):"
    )
    await state.set_state(EventStates.description)

@router.message(EventStates.description)
async def process_event_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    description = message.text.strip()
    
    if len(description) < 10 or len(description) > 1000:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    event_data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    event_id = await db.create_event(
        name=event_data['name'],
        description=description,
        created_by=message.from_user.id
    )
    
    await message.answer(
        f"‚úÖ **–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!**\n\n"
        f"üéâ **{event_data['name']}**\n\n"
        f"üìã **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{description}\n\n"
        f"ID: {event_id}"
    )
    
    await state.clear()
    logger.info(f"Admin {message.from_user.id} created event {event_id}")

@router.callback_query(F.data.startswith("admin_event_manage_"))
async def admin_event_manage_callback(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º"""
    event_id = int(callback.data.split("_")[3])
    
    if not is_admin(callback):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    event = await db.get_event_by_id(event_id)
    if not event:
        await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    
    event_text = format_event_info(event)
    
    await callback.message.edit_text(
        f"üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º**\n\n{event_text}",
        reply_markup=get_admin_event_manage_keyboard(event_id, event['is_active'])
    )

@router.callback_query(F.data.startswith("admin_event_activate_"))
async def admin_event_activate_callback(callback: CallbackQuery):
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
    event_id = int(callback.data.split("_")[3])
    
    if not is_admin(callback):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    await db.update_event(event_id, is_active=True)
    
    event = await db.get_event_by_id(event_id)
    event_text = format_event_info(event)
    
    await callback.message.edit_text(
        f"üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º**\n\n{event_text}",
        reply_markup=get_admin_event_manage_keyboard(event_id, True)
    )
    
    await callback.answer("üü¢ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!", show_alert=False)

@router.callback_query(F.data.startswith("admin_event_deactivate_"))
async def admin_event_deactivate_callback(callback: CallbackQuery):
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
    event_id = int(callback.data.split("_")[3])
    
    if not is_admin(callback):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    await db.update_event(event_id, is_active=False)
    
    event = await db.get_event_by_id(event_id)
    event_text = format_event_info(event)
    
    await callback.message.edit_text(
        f"üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º**\n\n{event_text}",
        reply_markup=get_admin_event_manage_keyboard(event_id, False)
    )
    
    await callback.answer("üî¥ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!", show_alert=False)

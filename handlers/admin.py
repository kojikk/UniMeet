from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
import logging

from database import Database
from config import DATABASE_URL, ADMIN_IDS, ADMIN_USERNAMES
from utils import is_admin, get_user_display_name

router = Router()
db = Database(DATABASE_URL)
logger = logging.getLogger(__name__)

def get_admin_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞"""
    keyboard = [
        [InlineKeyboardButton(text="üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", callback_data="admin_pending")],
        [InlineKeyboardButton(text="üéâ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏", callback_data="admin_events_list")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_verification_keyboard(request_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"""
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"verify_approve_{request_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"verify_reject_{request_id}")
        ],
        [InlineKeyboardButton(text="üë§ –ê–Ω–∫–µ—Ç–∞", callback_data=f"verify_profile_{request_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_pending")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_profile_view_keyboard(request_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç—ã"""
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"verify_approve_{request_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"verify_reject_{request_id}")
        ],
        [InlineKeyboardButton(text="üîô –°–∫—Ä—ã—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data=f"verify_hide_profile_{request_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_pending")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_pending_list_keyboard(verifications):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞—è–≤–æ–∫"""
    keyboard = []
    for verification in verifications:
        text = f"{verification['name']} ({verification['course']} –∫—É—Ä—Å)"
        keyboard.append([InlineKeyboardButton(
            text=text,
            callback_data=f"verify_view_{verification['id']}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_pending")])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def format_profile_for_admin(verification):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    return f"""
üë§ **–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**

üìö –ö—É—Ä—Å: {verification['course']}
üéì –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {verification['major']}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: {verification['age']}
‚ú® –ò–º—è: {verification['name']}

üìù –û —Å–µ–±–µ:
{verification['description']}

üÜî Telegram ID: {verification['telegram_id']}
üìÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞: {verification['created_at'][:16]}
"""

@router.message(Command("admin_panel"))
async def admin_panel_command(message: Message):
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin(message):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    pending_count = len(await db.get_pending_verifications())
    
    text = f"""
üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {pending_count}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await message.answer(text, reply_markup=get_admin_main_keyboard())

@router.message(Command("pending"))
async def pending_command(message: Message):
    """–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"""
    if not is_admin(message):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    verifications = await db.get_pending_verifications()
    
    if not verifications:
        await message.answer("‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏!")
        return
    
    text = f"üìã **–ó–∞—è–≤–∫–∏ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é ({len(verifications)})**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è:"
    await message.answer(text, reply_markup=get_pending_list_keyboard(verifications))

@router.callback_query(F.data == "admin_panel")
async def admin_panel_callback(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (callback)"""
    if not is_admin(callback):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    pending_count = len(await db.get_pending_verifications())
    
    text = f"""
üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {pending_count}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await callback.message.edit_text(text, reply_markup=get_admin_main_keyboard())

@router.callback_query(F.data == "admin_pending")
async def admin_pending_callback(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ (callback)"""
    if not is_admin(callback):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    verifications = await db.get_pending_verifications()
    
    if not verifications:
        await callback.message.edit_text("‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏!")
        return
    
    text = f"üìã **–ó–∞—è–≤–∫–∏ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é ({len(verifications)})**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è:"
    await callback.message.edit_text(text, reply_markup=get_pending_list_keyboard(verifications))

@router.callback_query(F.data.startswith("verify_view_"))
async def verify_view_callback(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏"""
    if not is_admin(callback):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    request_id = int(callback.data.split("_")[2])
    verification = await db.get_verification_by_id(request_id)
    
    if not verification:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    
    text = f"üîç **–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é #{verification['id']}**"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å–æ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–º –±–∏–ª–µ—Ç–æ–º
    try:
        await callback.message.answer_photo(
            photo=verification['student_card_photo'],
            caption=text,
            reply_markup=get_verification_keyboard(request_id)
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await callback.message.edit_text(
            text=f"{text}\n\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            reply_markup=get_verification_keyboard(request_id)
        )

@router.callback_query(F.data.startswith("verify_profile_"))
async def verify_profile_callback(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    request_id = int(callback.data.split("_")[2])
    verification = await db.get_verification_by_id(request_id)
    
    if not verification:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    
    profile_text = format_profile_for_admin(verification)
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ caption –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ –∂–µ —Ñ–æ—Ç–æ
    await callback.message.edit_caption(
        caption=profile_text,
        reply_markup=get_profile_view_keyboard(request_id)
    )

@router.callback_query(F.data.startswith("verify_hide_profile_"))
async def verify_hide_profile_callback(callback: CallbackQuery):
    """–°–∫—Ä—ã—Ç—å –∞–Ω–∫–µ—Ç—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ñ–æ—Ç–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if not is_admin(callback):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    request_id = int(callback.data.split("_")[3])
    verification = await db.get_verification_by_id(request_id)
    
    if not verification:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    text = f"üîç **–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é #{verification['id']}**"
    
    await callback.message.edit_caption(
        caption=text,
        reply_markup=get_verification_keyboard(request_id)
    )

@router.callback_query(F.data.startswith("verify_approve_"))
async def verify_approve_callback(callback: CallbackQuery, bot: Bot):
    """–û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É"""
    if not is_admin(callback):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    request_id = int(callback.data.split("_")[2])
    verification = await db.get_verification_by_id(request_id)
    
    if not verification or verification['status'] != 'pending':
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
    await db.process_verification(request_id, 'approved', callback.from_user.id)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    try:
        from handlers.menu import get_main_menu_keyboard
        from utils import get_user_display_name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        user_telegram_id = verification['telegram_id']
        user_is_admin = user_telegram_id in ADMIN_IDS
        
        await bot.send_message(
            chat_id=user_telegram_id,
            text="‚úÖ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!**\n\n"
                 "üéâ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞:\n"
                 "‚Ä¢ üë§ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É\n"
                 "‚Ä¢ üîç –ò—Å–∫–∞—Ç—å –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π (—Å–∫–æ—Ä–æ)\n"
                 "‚Ä¢ üéâ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö (—Å–∫–æ—Ä–æ)\n\n"
                 "–ò—Å–ø–æ–ª—å–∑—É–π –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∏–∂–µ!",
            reply_markup=get_main_menu_keyboard('approved', user_is_admin)
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {verification['telegram_id']}: {e}")
    
    admin_name = get_user_display_name(callback.from_user)
    await callback.message.edit_caption(
        caption=f"‚úÖ **–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞**\n\n"
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_name}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω."
    )
    
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!", show_alert=False)
    
    logger.info(f"Admin {callback.from_user.id} approved verification request {request_id}")

@router.callback_query(F.data.startswith("verify_reject_"))
async def verify_reject_callback(callback: CallbackQuery, bot: Bot):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É"""
    if not is_admin(callback):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    request_id = int(callback.data.split("_")[2])
    verification = await db.get_verification_by_id(request_id)
    
    if not verification or verification['status'] != 'pending':
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
    await db.process_verification(request_id, 'rejected', callback.from_user.id)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    try:
        from handlers.menu import get_main_menu_keyboard
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        user_telegram_id = verification['telegram_id']
        user_is_admin = user_telegram_id in ADMIN_IDS
        
        await bot.send_message(
            chat_id=user_telegram_id,
            text="‚ùå **–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ—è –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n"
                 "**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
                 "‚Ä¢ –§–æ—Ç–æ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤–æ\n"
                 "‚Ä¢ –î–∞–Ω–Ω—ã–µ –≤ –∞–Ω–∫–µ—Ç–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç—É–¥–±–∏–ª–µ—Ç—É\n"
                 "‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–µ—Ä–≤–∏—Å–∞\n\n"
                 "**–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
                 "‚Ä¢ ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n"
                 "‚Ä¢ üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Å—Ç—É–¥–±–∏–ª–µ—Ç–∞\n\n"
                 "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=get_main_menu_keyboard('rejected', user_is_admin)
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {verification['telegram_id']}: {e}")
    
    admin_name = get_user_display_name(callback.from_user)
    await callback.message.edit_caption(
        caption=f"‚ùå **–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n"
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_name}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω."
    )
    
    await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!", show_alert=False)
    
    logger.info(f"Admin {callback.from_user.id} rejected verification request {request_id}")

@router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not is_admin(callback):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
    await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö", show_alert=True)

@router.callback_query(F.data == "admin_close")
async def admin_close_callback(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin(callback):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    await callback.message.edit_text("‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞.")

async def notify_admins_about_verification(bot: Bot, verification_request):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"""
    admin_ids_to_notify = ADMIN_IDS.copy()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ username
    for username in ADMIN_USERNAMES:
        # TODO: –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å username -> id mapping
        pass
    
    message_text = f"""
üîî **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é!**

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {verification_request['name']}
üìö –ö—É—Ä—Å: {verification_request['course']}
üéì –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {verification_request['major']}

–î–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
/pending - —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
/admin_panel - –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
"""
    
    for admin_id in admin_ids_to_notify:
        try:
            await bot.send_message(admin_id, message_text)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

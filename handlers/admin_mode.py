"""
–°–∏—Å—Ç–µ–º–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏ –∞–¥–º–∏–Ω—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database import Database
from config import DATABASE_URL
from utils import is_admin

router = Router()
db = Database(DATABASE_URL)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
admin_modes = {}

def is_in_admin_mode(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —Ä–µ–∂–∏–º–µ"""
    return admin_modes.get(user_id, False)

def set_admin_mode(user_id: int, mode: bool):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if mode:
        admin_modes[user_id] = True
    else:
        admin_modes.pop(user_id, None)

@router.message(F.text == "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def enter_admin_mode(message: Message):
    """–í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º"""
    if not is_admin(message):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    set_admin_mode(message.from_user.id, True)
    
    from handlers.menu import get_main_menu_keyboard
    
    await message.answer(
        "üîß **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!**\n\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –≤–∏–¥–∏—à—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é.\n"
        "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É **–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏**.",
        reply_markup=get_main_menu_keyboard(admin_mode=True)
    )

@router.message(F.text == "üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏")
async def exit_admin_mode(message: Message):
    """–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    if not is_admin(message):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    set_admin_mode(message.from_user.id, False)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    user = await db.get_user(message.from_user.id)
    user_status = user['verification_status'] if user else None
    is_user_admin = is_admin(message)
    
    from handlers.menu import get_main_menu_keyboard
    
    await message.answer(
        "üö™ **–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏**\n\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –≤–∏–¥–∏—à—å –æ–±—ã—á–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é.\n"
        "–î–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**.",
        reply_markup=get_main_menu_keyboard(user_status, is_user_admin, admin_mode=False)
    )

@router.message(F.text == "üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")
async def admin_pending_menu(message: Message):
    """–ó–∞—è–≤–∫–∏ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
    if not is_admin(message) or not is_in_admin_mode(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —Ä–µ–∂–∏–º–µ.")
        return
    
    from handlers.admin import pending_command
    await pending_command(message)

@router.message(F.text == "üéâ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏")
async def admin_events_menu(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
    if not is_admin(message) or not is_in_admin_mode(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —Ä–µ–∂–∏–º–µ.")
        return
    
    from handlers.events import admin_events_command
    await admin_events_command(message)

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_stats_menu(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
    if not is_admin(message) or not is_in_admin_mode(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —Ä–µ–∂–∏–º–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    users_count = await get_users_stats()
    events_count = await get_events_stats()
    pending_count = len(await db.get_pending_verifications())
    
    await message.answer(
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
        f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {users_count['total']}\n"
        f"‚Ä¢ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: {users_count['approved']}\n"
        f"‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {users_count['pending']}\n"
        f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {users_count['rejected']}\n\n"
        f"üéâ **–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:**\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {events_count['total']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {events_count['active']}\n\n"
        f"üìã **–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:** {pending_count}"
    )

async def get_users_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with db._connect() as conn:
        cursor = await conn.execute("""
            SELECT 
                COUNT(*) as total,
                SUM(CASE WHEN verification_status = 'approved' THEN 1 ELSE 0 END) as approved,
                SUM(CASE WHEN verification_status = 'pending' THEN 1 ELSE 0 END) as pending,
                SUM(CASE WHEN verification_status = 'rejected' THEN 1 ELSE 0 END) as rejected
            FROM users 
            WHERE name IS NOT NULL
        """)
        row = await cursor.fetchone()
        return {
            'total': row[0] or 0,
            'approved': row[1] or 0,
            'pending': row[2] or 0,
            'rejected': row[3] or 0
        }

async def get_events_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    async with db._connect() as conn:
        cursor = await conn.execute("""
            SELECT 
                COUNT(*) as total,
                SUM(CASE WHEN is_active = TRUE THEN 1 ELSE 0 END) as active
            FROM events
        """)
        row = await cursor.fetchone()
        return {
            'total': row[0] or 0,
            'active': row[1] or 0
        }

# –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –≤ –∫–ª–∞—Å—Å Database
def _connect(self):
    """–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)"""
    import aiosqlite
    return aiosqlite.connect(self.db_path)

# –ü–∞—Ç—á–∏–º –∫–ª–∞—Å—Å Database
Database._connect = _connect

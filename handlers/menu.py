from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from database import Database
from config import DATABASE_URL
from utils import is_admin

router = Router()
db = Database(DATABASE_URL)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
last_bot_messages = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (True = —Å —Ñ–æ—Ç–æ, False = —Ç–µ–∫—Å—Ç)
last_message_has_photo = {}

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
async def edit_or_send_message(message: Message, text: str, reply_markup=None, photo=None):
    """–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ"""
    user_id = message.from_user.id
    
    print(f"üîç DEBUG edit_or_send_message: user_id={user_id}, photo={'–µ—Å—Ç—å' if photo else '–Ω–µ—Ç'}")
    print(f"üîç –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {last_bot_messages}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    if user_id in last_bot_messages:
        bot_message_id = last_bot_messages[user_id]
        previous_had_photo = last_message_has_photo.get(user_id, False)
        print(f"üîÑ –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: {bot_message_id}")
        print(f"üìä –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ {'—Å —Ñ–æ—Ç–æ' if previous_had_photo else '—Ç–µ–∫—Å—Ç–æ–≤–æ–µ'}")
        print(f"üìä –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç {'—Å —Ñ–æ—Ç–æ' if photo else '—Ç–µ–∫—Å—Ç–æ–≤–æ–µ'}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å/–ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å
        can_edit = not photo and not previous_had_photo  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç ‚Üí —Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        
        try:
            if can_edit:
                print("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –∏–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç (—Ç–µ–∫—Å—Ç‚Üí—Ç–µ–∫—Å—Ç)")
                # –ú–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
                await message.bot.edit_message_text(
                    text=text,
                    chat_id=message.chat.id,
                    message_id=bot_message_id,
                    reply_markup=reply_markup
                )
                print("‚úÖ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID
                class FakeMessage:
                    def __init__(self, message_id):
                        self.message_id = message_id
                sent_message = FakeMessage(bot_message_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                last_message_has_photo[user_id] = bool(photo)
                print(f"üíæ –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω: {'—Ñ–æ—Ç–æ' if photo else '—Ç–µ–∫—Å—Ç'}")
                return sent_message
                
            else:
                print(f"üîÑ –ó–∞–º–µ–Ω–∞: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ ({'—Ñ–æ—Ç–æ' if photo else '—Ç–µ–∫—Å—Ç'})")
                # –ù—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ (—Ñ–æ—Ç–æ‚Üî—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ‚Üî—Ñ–æ—Ç–æ)
                await message.bot.delete_message(message.chat.id, bot_message_id)
                
                if photo:
                    sent_message = await message.answer_photo(photo=photo, caption=text, reply_markup=reply_markup)
                    print(f"‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: {sent_message.message_id}")
                else:
                    sent_message = await message.answer(text, reply_markup=reply_markup)
                    print(f"‚úÖ –ù–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: {sent_message.message_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º ID –∏ —Ç–∏–ø –≤ —Å–ª–æ–≤–∞—Ä—è—Ö
                last_bot_messages[user_id] = sent_message.message_id
                last_message_has_photo[user_id] = bool(photo)
                print(f"üíæ ID –æ–±–Ω–æ–≤–ª–µ–Ω: {sent_message.message_id}, —Ç–∏–ø: {'—Ñ–æ—Ç–æ' if photo else '—Ç–µ–∫—Å—Ç'}")
                return sent_message
            
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ (–∫–æ–¥ –Ω–∏–∂–µ)
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            if user_id in last_bot_messages:
                del last_bot_messages[user_id]
            if user_id in last_message_has_photo:
                del last_message_has_photo[user_id]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    if photo:
        sent_message = await message.answer_photo(photo=photo, caption=text, reply_markup=reply_markup)
        print(f"‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: {sent_message.message_id}")
    else:
        sent_message = await message.answer(text, reply_markup=reply_markup)
        print(f"‚úÖ –ù–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: {sent_message.message_id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –µ–≥–æ —Ç–∏–ø
    last_bot_messages[user_id] = sent_message.message_id
    last_message_has_photo[user_id] = bool(photo)
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π ID: {sent_message.message_id}, —Ç–∏–ø: {'—Ñ–æ—Ç–æ' if photo else '—Ç–µ–∫—Å—Ç'}")
    print(f"üìä –ò—Ç–æ–≥–æ–≤—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {last_bot_messages}")
    print(f"üìä –¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π: {last_message_has_photo}")
    
    return sent_message

def determine_user_state(user):
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
    if not user or not user.get('name'):
        return 'new'  # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    verification_status = user.get('verification_status', 'not_requested')
    
    if verification_status == 'not_requested':
        return 'draft'  # –ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ –ø–æ–¥–∞–Ω–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    elif verification_status == 'pending':
        return 'pending'  # –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    elif verification_status == 'approved':
        return 'approved'  # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    elif verification_status == 'rejected':
        return 'rejected'  # –û—Ç–∫–ª–æ–Ω–µ–Ω
    else:
        return 'new'  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ = –Ω–æ–≤—ã–π

def get_main_menu_keyboard(user_state: str = 'new', is_user_admin: bool = False, admin_mode: bool = False):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = []
    
    if admin_mode:
        # –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
        keyboard = [
            [KeyboardButton(text="üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")],
            [KeyboardButton(text="üéâ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏")]
        ]
        
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if user_state == 'new':
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            keyboard = [
                [KeyboardButton(text="üöÄ –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")],
                [KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")]
            ]
            
        elif user_state == 'draft':
            # –ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ –ø–æ–¥–∞–Ω–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
            keyboard = [
                [KeyboardButton(text="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞"), KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
                [KeyboardButton(text="üì§ –ü–æ–¥–∞—Ç—å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")]
            ]
            
        elif user_state == 'pending':
            # –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            keyboard = [
                [KeyboardButton(text="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞")],
                [KeyboardButton(text="‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")]
            ]
                
        elif user_state == 'approved':
            # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
            keyboard = [
                [KeyboardButton(text="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞"), KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
                [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ª—é–¥–µ–π"), KeyboardButton(text="üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")],
            ]
                
        elif user_state == 'rejected':
            # –û—Ç–∫–ª–æ–Ω–µ–Ω - –Ω—É–∂–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
            keyboard = [
                [KeyboardButton(text="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞"), KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
            ]
        
        # –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if is_user_admin:
            keyboard.append([KeyboardButton(text="üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")])
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

def get_inline_menu_keyboard(user_status: str = None, is_user_admin: bool = False):
    """Inline –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    keyboard = []
    
    if user_status == 'approved':
        keyboard = [
            [
                InlineKeyboardButton(text="üë§ –ê–Ω–∫–µ—Ç–∞", callback_data="menu_profile"),
                InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="menu_edit")
            ],
            [
                InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="menu_search"),
                InlineKeyboardButton(text="üéâ –°–æ–±—ã—Ç–∏—è", callback_data="menu_events")
            ]
        ]
    elif user_status == 'pending':
        keyboard = [
            [InlineKeyboardButton(text="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞", callback_data="menu_profile")],
            [InlineKeyboardButton(text="‚è≥ –°—Ç–∞—Ç—É—Å", callback_data="menu_status")]
        ]
    elif user_status == 'rejected':
        keyboard = [
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="menu_edit")],
            [InlineKeyboardButton(text="üì∏ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ", callback_data="menu_reverify")]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å", callback_data="menu_start")]
        ]
    
    if is_user_admin:
        keyboard.append([InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω", callback_data="menu_admin")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.message(F.text == "üöÄ –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
async def create_profile_menu(message: Message, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
    from handlers.state_manager import start_user_operation
    
    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ message  
    bot = message.bot
    await start_user_operation(message.from_user.id, bot)
    
    from handlers.registration import start_command
    await start_command(message, state)

async def delete_user_and_bot_messages(message: Message):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"""
    user_id = message.from_user.id
    print(f"üîç DEBUG: –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è user_id={user_id}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if user_id in last_bot_messages:
        bot_message_id = last_bot_messages[user_id]
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å ID: {bot_message_id}")
        try:
            await message.bot.delete_message(
                chat_id=message.chat.id,
                message_id=bot_message_id
            )
            print(f"‚úÖ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        del last_bot_messages[user_id]
        print(f"üóëÔ∏è ID —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ª–æ–≤–∞—Ä—è")
    else:
        print(f"‚ÑπÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

async def send_and_save_message(message: Message, text: str, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ ID"""
    sent_message = await message.answer(text, reply_markup=reply_markup)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = message.from_user.id
    message_id = sent_message.message_id
    last_bot_messages[user_id] = message_id
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id} –¥–ª—è user_id: {user_id}")
    print(f"üìä –¢–µ–∫—É—â–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {last_bot_messages}")
    return sent_message

@router.message(F.text == "üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def view_profile_menu(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        user = await db.get_user(message.from_user.id)
        
        if not user or not user.get('name'):
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_menu = get_main_menu_keyboard('new', is_admin(message), admin_mode=False)
            await edit_or_send_message(message, "‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –°–æ–∑–¥–∞–π –µ—ë!", reply_markup=current_menu)
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–Ω–∫–µ—Ç—É
        status_emoji = get_status_emoji(user.get('verification_status', 'not_requested'))
        status_text = get_status_text(user.get('verification_status', 'not_requested'))
        
        profile_text = f"""üë§ **–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞** {status_emoji}

**–°—Ç–∞—Ç—É—Å:** {status_text}
**–ò–º—è:** {user['name']}
**–í–æ–∑—Ä–∞—Å—Ç:** {user['age']} –ª–µ—Ç
**–ö—É—Ä—Å:** {user['course']}
**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:** {user['major']}

**–û–ø–∏—Å–∞–Ω–∏–µ:**
{user['description']}"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        user_state = determine_user_state(user)
        is_user_admin = is_admin(message)
        current_menu = get_main_menu_keyboard(user_state, is_user_admin, admin_mode=False)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–Ω–∞ —Å–∞–º–∞ —É–¥–∞–ª–∏—Ç –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç)
        if user.get('photo_file_id'):
            await edit_or_send_message(message, profile_text, reply_markup=current_menu, photo=user['photo_file_id'])
        else:
            await edit_or_send_message(message, profile_text, reply_markup=current_menu)
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ view_profile_menu: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

@router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
@router.message(F.text.in_(["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"]))
async def edit_profile_menu(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é (—É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–Ω–æ–ø–æ–∫)"""
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    from handlers.state_manager import start_user_operation
    
    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ message
    bot = message.bot
    await start_user_operation(message.from_user.id, bot)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–∞—á–∞–ª–∞
    try:
        await message.delete()
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å) —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤ –∞–¥–º–∏–Ω–∫–µ
    from handlers.admin import is_in_admin_mode
    was_in_admin = is_in_admin_mode(message.from_user.id)
    
    if was_in_admin:
        await message.answer("üîÑ **–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω**\n\n–í—ã—à–µ–ª –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã.")
    
    from handlers.registration import edit_profile_command
    await edit_profile_command(message, state)

@router.message(F.text == "üì§ –ü–æ–¥–∞—Ç—å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")
async def submit_for_verification_menu(message: Message, state: FSMContext):
    """–ü–æ–¥–∞—á–∞ –∞–Ω–∫–µ—Ç—ã –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è draft"""
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    from handlers.state_manager import start_user_operation
    
    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ message
    bot = message.bot
    await start_user_operation(message.from_user.id, bot)
    
    user = await db.get_user(message.from_user.id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
    if not user:
        user_state = 'new'
        current_menu = get_main_menu_keyboard('new', is_admin(message), admin_mode=False)
    else:
        user_state = determine_user_state(user)
        current_menu = get_main_menu_keyboard(user_state, is_admin(message), admin_mode=False)
    
    if not user or not user.get('name'):
        await edit_or_send_message(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –∞–Ω–∫–µ—Ç—É!", reply_markup=current_menu)
        return
        
    if user.get('verification_status') != 'not_requested':
        await edit_or_send_message(message, "‚ùå –ê–Ω–∫–µ—Ç–∞ —É–∂–µ –ø–æ–¥–∞–Ω–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", reply_markup=current_menu)
        return
    
    await edit_or_send_message(
        message,
        "üì∏ **–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞**\n\n"
        "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã —Å—Ç—É–¥–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é "
        "—Å–≤–æ–µ–≥–æ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞.\n\n"
        "**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:**\n"
        "‚Ä¢ –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ –í–∏–¥–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ:",
        reply_markup=current_menu
    )
    
    from handlers.states import VerificationStates
    await state.set_state(VerificationStates.student_card_photo)

# –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ handlers/admin_mode.py

@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –ª—é–¥–µ–π")
async def search_people_menu(message: Message):
    """–ü–æ–∏—Å–∫ –ª—é–¥–µ–π —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
    user = await db.get_user(message.from_user.id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
    if not user:
        user_state = 'new'
        current_menu = get_main_menu_keyboard('new', is_admin(message), admin_mode=False)
    else:
        user_state = determine_user_state(user)
        current_menu = get_main_menu_keyboard(user_state, is_admin(message), admin_mode=False)
    
    if not user or user['verification_status'] != 'approved':
        await edit_or_send_message(message, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=current_menu)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
    events_count = await db.get_user_events_count(user['id'])
    
    if events_count == 0:
        await edit_or_send_message(
            message,
            "‚ùå **–î–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π –Ω—É–∂–Ω–æ —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö**\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—à–∏—Å—å —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n"
            "üéâ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É **–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è**\n\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –ª—é–¥–µ–π —Å –æ–±—â–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏! ü§ù",
            reply_markup=current_menu
        )
        return
    
    await edit_or_send_message(
        message,
        f"üîç **–ü–æ–∏—Å–∫ –ª—é–¥–µ–π**\n\n"
        f"üë• –¢—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ {events_count} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏(—è—Ö)\n\n"
        "–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!\n"
        "–°–∫–æ—Ä–æ —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ –°—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏\n"
        "‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –ª—é–¥–µ–π —Å –æ–±—â–∏–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏\n\n"
        "–°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üöÄ",
        reply_markup=current_menu
    )

@router.message(F.text == "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def events_menu(message: Message):
    """–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ events.py —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    from handlers.events import get_events_list_keyboard
    
    user = await db.get_user(message.from_user.id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
    if not user:
        user_state = 'new'
        current_menu = get_main_menu_keyboard('new', is_admin(message), admin_mode=False)
        await edit_or_send_message(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ –±–æ—Ç–µ!", reply_markup=current_menu)
        return
    else:
        user_state = determine_user_state(user)
        current_menu = get_main_menu_keyboard(user_state, is_admin(message), admin_mode=False)
    
    if user['verification_status'] != 'approved':
        await edit_or_send_message(message, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=current_menu)
        return
    
    events = await db.get_active_events()
    
    text = f"üéâ **–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ({len(events)})**\n\n"
    if events:
        text += "–í—ã–±–µ—Ä–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
    else:
        text += "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ (—Ç–∞ –∂–µ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ events.py)
    keyboard = get_events_list_keyboard(events, user['id'])
    
    await edit_or_send_message(message, text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "üì∏ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è" —É–¥–∞–ª–µ–Ω - —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–Ω–æ–ø–∫—É "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–∞—á–∏

@router.message(F.text == "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
async def status_menu(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
    user = await db.get_user(message.from_user.id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
    if not user:
        user_state = 'new'
        current_menu = get_main_menu_keyboard('new', is_admin(message), admin_mode=False)
        await edit_or_send_message(message, "‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã.", reply_markup=current_menu)
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    user_state = determine_user_state(user)
    current_menu = get_main_menu_keyboard(user_state, is_admin(message), admin_mode=False)
    
    await edit_or_send_message(
        message,
        f"‚ÑπÔ∏è **–°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏**\n\n"
        f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {get_status_emoji(user_state)} {get_status_text(user_state)}\n\n"
        f"üìÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {user['created_at'][:10] if user['created_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
        reply_markup=current_menu
    )

@router.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot_menu(message: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await edit_or_send_message(
        message,
        "üéì **–û UniMeetingBot**\n\n"
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.\n\n"
        "**–ß—Ç–æ —è —É–º–µ—é:**\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π\n\n"
        "**–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–ª—é:**\n"
        "‚Ä¢ –°–∏—Å—Ç–µ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥—Ä—É–∑–µ–π\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –∫–Ω–æ–ø–∫–æ–π '–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É' üöÄ"
    )


# Inline callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data == "menu_profile")
async def inline_profile_callback(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ inline"""
    from handlers.registration import view_profile
    await view_profile(callback.message)

@router.callback_query(F.data == "menu_edit")
async def inline_edit_callback(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ inline"""
    from handlers.registration import edit_profile_command
    await edit_profile_command(callback.message, None)

@router.callback_query(F.data == "menu_admin")
async def inline_admin_callback(callback: CallbackQuery):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ inline"""
    if not is_admin(callback):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    from handlers.admin import admin_panel_callback
    await admin_panel_callback(callback)

@router.callback_query(F.data == "menu_search")
async def inline_search_callback(callback: CallbackQuery):
    """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ inline"""
    user = await db.get_user(callback.from_user.id)
    
    if not user or user['verification_status'] != 'approved':
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
    events_count = await db.get_user_events_count(user['id'])
    
    if events_count == 0:
        await callback.answer("‚ùå –î–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π –Ω—É–∂–Ω–æ —É—á–∞—Å—Ç–∏–µ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!", show_alert=True)
        return
    
    await callback.answer("üîç –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!", show_alert=True)

@router.callback_query(F.data == "menu_events")
async def inline_events_callback(callback: CallbackQuery):
    """–°–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ inline"""
    user = await db.get_user(callback.from_user.id)
    
    if not user or user['verification_status'] != 'approved':
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", show_alert=True)
        return
    
    from handlers.events import events_list_callback
    await events_list_callback(callback)

@router.callback_query(F.data == "menu_help")
async def inline_help_callback(callback: CallbackQuery):
    """–ü–æ–º–æ—â—å —á–µ—Ä–µ–∑ inline"""
    await help_menu(callback.message)

@router.callback_query(F.data == "menu_start")
async def inline_start_callback(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ inline"""
    from handlers.registration import start_command
    await start_command(callback.message, None)

@router.callback_query(F.data == "menu_status")
async def inline_status_callback(callback: CallbackQuery):
    """–°—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ inline"""
    await status_menu(callback.message)

@router.message(Command("menu"))
async def show_menu_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"""
    user = await db.get_user(message.from_user.id)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    user_state = determine_user_state(user) if user else 'new'
    is_user_admin = is_admin(message)
    from handlers.admin import is_in_admin_mode
    admin_mode = is_in_admin_mode(message.from_user.id)
    
    await message.answer(
        "üìã **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏:",
        reply_markup=get_main_menu_keyboard(user_state, is_user_admin, admin_mode)
    )

async def update_user_menu(message: Message, user_state: str, user_id: int = None):
    """–û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∞"""
    from handlers.admin import is_in_admin_mode
    
    # –ï—Å–ª–∏ user_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ message
    actual_user_id = user_id if user_id else message.from_user.id
    
    # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
    class FakeMessage:
        def __init__(self, from_user_data):
            self.from_user = from_user_data
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
    try:
        user_info = await message.bot.get_chat(actual_user_id)
        fake_message = FakeMessage(user_info)
        is_user_admin = is_admin(fake_message)
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –ª–æ–≥–∏–∫—É
        is_user_admin = is_admin(message)
    
    admin_mode = is_in_admin_mode(actual_user_id)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"üîç DEBUG update_user_menu:")
    print(f"   user_id: {message.from_user.id}")
    print(f"   username: {message.from_user.username}")
    print(f"   user_state: {user_state}")
    print(f"   is_admin: {is_user_admin}")
    print(f"   admin_mode: {admin_mode}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    from config import ADMIN_IDS, ADMIN_USERNAMES
    print(f"   ADMIN_IDS: {ADMIN_IDS}")
    print(f"   ADMIN_USERNAMES: {ADMIN_USERNAMES}")
    print(f"   user_id in ADMIN_IDS: {message.from_user.id in ADMIN_IDS}")
    username_lower = message.from_user.username.lower() if message.from_user.username else None
    print(f"   username_lower: {username_lower}")
    print(f"   username in ADMIN_USERNAMES: {username_lower and username_lower in ADMIN_USERNAMES}")
    
    await message.answer(
        "üìã –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        reply_markup=get_main_menu_keyboard(user_state, is_user_admin, admin_mode)
    )

def get_status_emoji(user_state: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    status_emojis = {
        'new': '‚ö´',  # –ù–æ–≤—ã–π
        'draft': '‚ö™',  # –ß–µ—Ä–Ω–æ–≤–∏–∫
        'pending': 'üü°',  # –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        'approved': 'üü¢',  # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
        'rejected': 'üî¥'  # –û—Ç–∫–ª–æ–Ω–µ–Ω
    }
    return status_emojis.get(user_state, '‚ö™')

def get_status_text(user_state: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    status_texts = {
        'new': '–ê–Ω–∫–µ—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞',
        'draft': '–ß–µ—Ä–Ω–æ–≤–∏–∫ (–Ω–µ –ø–æ–¥–∞–Ω–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é)', 
        'pending': '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
        'approved': '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ',
        'rejected': '–¢—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π'
    }
    return status_texts.get(user_state, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ')

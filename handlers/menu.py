from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

from database import Database
from config import DATABASE_URL
from utils import is_admin

router = Router()
db = Database(DATABASE_URL)

def get_main_menu_keyboard(user_status: str = None, is_user_admin: bool = False):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = []
    
    if user_status == 'approved':
        # –ú–µ–Ω—é –¥–ª—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard = [
            [KeyboardButton(text="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞"), KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ª—é–¥–µ–π"), KeyboardButton(text="üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")],
        ]
        
        if is_user_admin:
            keyboard.append([KeyboardButton(text="üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")])
            
    elif user_status == 'pending':
        # –ú–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        keyboard = [
            [KeyboardButton(text="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞")],
            [KeyboardButton(text="‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")]
        ]
        
        if is_user_admin:
            keyboard.append([KeyboardButton(text="üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")])
            
    elif user_status == 'rejected':
        # –ú–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–æ–π
        keyboard = [
            [KeyboardButton(text="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞"), KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")],
            [KeyboardButton(text="üì∏ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è")]
        ]
        
        if is_user_admin:
            keyboard.append([KeyboardButton(text="üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")])
            
    else:
        # –ú–µ–Ω—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard = [
            [KeyboardButton(text="üöÄ –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")],
            [KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")]
        ]
        
        if is_user_admin:
            keyboard.append([KeyboardButton(text="üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")])
    
    # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö
    keyboard.append([KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")])
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

def get_inline_menu_keyboard(user_status: str = None, is_user_admin: bool = False):
    """Inline –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    keyboard = []
    
    if user_status == 'approved':
        keyboard = [
            [
                InlineKeyboardButton(text="üë§ –ê–Ω–∫–µ—Ç–∞", callback_data="menu_profile"),
                InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="menu_edit")
            ],
            [
                InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="menu_search"),
                InlineKeyboardButton(text="üéâ –°–æ–±—ã—Ç–∏—è", callback_data="menu_events")
            ]
        ]
    elif user_status == 'pending':
        keyboard = [
            [InlineKeyboardButton(text="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞", callback_data="menu_profile")],
            [InlineKeyboardButton(text="‚è≥ –°—Ç–∞—Ç—É—Å", callback_data="menu_status")]
        ]
    elif user_status == 'rejected':
        keyboard = [
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="menu_edit")],
            [InlineKeyboardButton(text="üì∏ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ", callback_data="menu_reverify")]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å", callback_data="menu_start")]
        ]
    
    if is_user_admin:
        keyboard.append([InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω", callback_data="menu_admin")])
    
    keyboard.append([InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.message(F.text == "üöÄ –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
async def create_profile_menu(message: Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
    from handlers.registration import start_command
    await start_command(message, None)

@router.message(F.text == "üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def view_profile_menu(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
    from handlers.registration import view_profile
    await view_profile(message)

@router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def edit_profile_menu(message: Message):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
    from handlers.registration import edit_profile_command
    await edit_profile_command(message, None)

@router.message(F.text == "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel_menu(message: Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
    if not is_admin(message):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    from handlers.admin import admin_panel_command
    await admin_panel_command(message)

@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –ª—é–¥–µ–π")
async def search_people_menu(message: Message):
    """–ü–æ–∏—Å–∫ –ª—é–¥–µ–π —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
    user = await db.get_user(message.from_user.id)
    
    if not user or user['verification_status'] != 'approved':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
    events_count = await db.get_user_events_count(user['id'])
    
    if events_count == 0:
        await message.answer(
            "‚ùå **–î–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π –Ω—É–∂–Ω–æ —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö**\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—à–∏—Å—å —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n"
            "üéâ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É **–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è**\n\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –ª—é–¥–µ–π —Å –æ–±—â–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏! ü§ù"
        )
        return
    
    await message.answer(
        f"üîç **–ü–æ–∏—Å–∫ –ª—é–¥–µ–π**\n\n"
        f"üë• –¢—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ {events_count} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏(—è—Ö)\n\n"
        "–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!\n"
        "–°–∫–æ—Ä–æ —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ –°—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏\n"
        "‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –ª—é–¥–µ–π —Å –æ–±—â–∏–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏\n\n"
        "–°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üöÄ"
    )

@router.message(F.text == "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def events_menu(message: Message):
    """–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
    from handlers.events import events_list_command
    await events_list_command(message)

@router.message(F.text == "üì∏ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è")
async def reverify_menu(message: Message):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
    from handlers.registration import resend_verification_callback
    from aiogram.fsm.context import FSMContext
    from aiogram.fsm.storage.base import StorageKey
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π callback –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏
    user = await db.get_user(message.from_user.id)
    
    if not user or user['verification_status'] != 'rejected':
        await message.answer("‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ.")
        return
    
    await message.answer(
        "üì∏ **–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Å–æ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–º –±–∏–ª–µ—Ç–æ–º:\n\n"
        "**–£–±–µ–¥–∏—Å—å, —á—Ç–æ:**\n"
        "‚Ä¢ –§–æ—Ç–æ —á–µ—Ç–∫–æ–µ –∏ —Ä–∞–∑–±–æ—Ä—á–∏–≤–æ–µ\n"
        "‚Ä¢ –í–∏–¥–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–±–∏–ª–µ—Ç–∞\n"
        "‚Ä¢ –î–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Ç–≤–æ—è –∑–∞—è–≤–∫–∞ —Å–Ω–æ–≤–∞ –ø–æ–ø–∞–¥–µ—Ç –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
    from aiogram import Bot
    from handlers.states import VerificationStates
    bot = Bot.get_current()
    storage = bot.session.middleware.storage if hasattr(bot.session, 'middleware') else None
    
    if storage:
        key = StorageKey(bot.id, message.from_user.id, message.from_user.id)
        await storage.set_state(key, VerificationStates.student_card_photo)

@router.message(F.text == "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
async def status_menu(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
    user = await db.get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã.")
        return
    
    status_text = {
        'not_requested': 'üÜï –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω–∞',
        'pending': '‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤',
        'approved': '‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞',
        'rejected': '‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
    }
    
    status = user['verification_status']
    await message.answer(
        f"‚ÑπÔ∏è **–°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏**\n\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_text.get(status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        f"üìÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {user['created_at'][:10] if user['created_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
    )

@router.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot_menu(message: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
    await message.answer(
        "üéì **–û UniMeetingBot**\n\n"
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.\n\n"
        "**–ß—Ç–æ —è —É–º–µ—é:**\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π\n\n"
        "**–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–ª—é:**\n"
        "‚Ä¢ –°–∏—Å—Ç–µ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥—Ä—É–∑–µ–π\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –∫–Ω–æ–ø–∫–æ–π '–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É' üöÄ"
    )

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_menu(message: Message):
    """–ü–æ–º–æ—â—å —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
    user = await db.get_user(message.from_user.id)
    admin_text = "\n\nüîß **–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:**\n/admin_panel - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n/pending - –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é" if is_admin(message) else ""
    
    if user and user['verification_status'] == 'approved':
        await message.answer(
            "‚ùì **–ü–æ–º–æ—â—å**\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
            "üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É\n"
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
            "üîç –ü–æ–∏—Å–∫ –ª—é–¥–µ–π - –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π\n"
            "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è - —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è\n\n"
            "**–ö–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/profile - –ø–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—É\n"
            "/edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n\n"
            "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º." + admin_text
        )
    elif user and user['verification_status'] == 'pending':
        await message.answer(
            "‚ùì **–ü–æ–º–æ—â—å**\n\n"
            "‚è≥ –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
            "üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É\n"
            "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n\n"
            "**–ö–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/profile - –ø–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—É\n\n"
            "–î–æ–∂–¥–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!" + admin_text
        )
    elif user and user['verification_status'] == 'rejected':
        await message.answer(
            "‚ùì **–ü–æ–º–æ—â—å**\n\n"
            "‚ùå –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
            "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
            "üì∏ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ\n\n"
            "**–ö–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É\n\n"
            "–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–¥–∞–π –∑–∞—è–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ!" + admin_text
        )
    else:
        await message.answer(
            "‚ùì **–ü–æ–º–æ—â—å**\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UniMeetingBot!\n\n"
            "**–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:**\n"
            "üöÄ –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É - –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
            "‚ÑπÔ∏è –û –±–æ—Ç–µ - —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ\n\n"
            "**–ö–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n\n"
            "–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ–π–¥–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!" + admin_text
        )

# Inline callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data == "menu_profile")
async def inline_profile_callback(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ inline"""
    from handlers.registration import view_profile
    await view_profile(callback.message)

@router.callback_query(F.data == "menu_edit")
async def inline_edit_callback(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ inline"""
    from handlers.registration import edit_profile_command
    await edit_profile_command(callback.message, None)

@router.callback_query(F.data == "menu_admin")
async def inline_admin_callback(callback: CallbackQuery):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ inline"""
    if not is_admin(callback):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    from handlers.admin import admin_panel_callback
    await admin_panel_callback(callback)

@router.callback_query(F.data == "menu_search")
async def inline_search_callback(callback: CallbackQuery):
    """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ inline"""
    user = await db.get_user(callback.from_user.id)
    
    if not user or user['verification_status'] != 'approved':
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
    events_count = await db.get_user_events_count(user['id'])
    
    if events_count == 0:
        await callback.answer("‚ùå –î–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π –Ω—É–∂–Ω–æ —É—á–∞—Å—Ç–∏–µ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!", show_alert=True)
        return
    
    await callback.answer("üîç –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!", show_alert=True)

@router.callback_query(F.data == "menu_events")
async def inline_events_callback(callback: CallbackQuery):
    """–°–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ inline"""
    user = await db.get_user(callback.from_user.id)
    
    if not user or user['verification_status'] != 'approved':
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", show_alert=True)
        return
    
    from handlers.events import events_list_callback
    await events_list_callback(callback)

@router.callback_query(F.data == "menu_help")
async def inline_help_callback(callback: CallbackQuery):
    """–ü–æ–º–æ—â—å —á–µ—Ä–µ–∑ inline"""
    await help_menu(callback.message)

@router.callback_query(F.data == "menu_start")
async def inline_start_callback(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ inline"""
    from handlers.registration import start_command
    await start_command(callback.message, None)

@router.callback_query(F.data == "menu_status")
async def inline_status_callback(callback: CallbackQuery):
    """–°—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ inline"""
    await status_menu(callback.message)

@router.message(Command("menu"))
async def show_menu_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"""
    user = await db.get_user(message.from_user.id)
    status = user['verification_status'] if user else None
    is_user_admin = is_admin(message)
    
    await message.answer(
        "üìã **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏:",
        reply_markup=get_main_menu_keyboard(status, is_user_admin)
    )

async def update_user_menu(message: Message, user_status: str):
    """–û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    is_user_admin = is_admin(message)
    
    await message.answer(
        "üìã –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        reply_markup=get_main_menu_keyboard(user_status, is_user_admin)
    )

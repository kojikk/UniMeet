#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import aiosqlite
import os
from config import DATABASE_URL

async def migrate_database():
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîÑ –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    async with aiosqlite.connect(DATABASE_URL) as db:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ admin_id –≤ verification_requests
            cursor = await db.execute("PRAGMA table_info(verification_requests)")
            columns = await cursor.fetchall()
            column_names = [column[1] for column in columns]
            
            if 'admin_id' not in column_names:
                print("‚ûï –î–æ–±–∞–≤–ª—è—é –ø–æ–ª–µ admin_id –≤ verification_requests...")
                await db.execute("ALTER TABLE verification_requests ADD COLUMN admin_id INTEGER")
                
            if 'processed_at' not in column_names:
                print("‚ûï –î–æ–±–∞–≤–ª—è—é –ø–æ–ª–µ processed_at –≤ verification_requests...")
                await db.execute("ALTER TABLE verification_requests ADD COLUMN processed_at TIMESTAMP")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ admins
            cursor = await db.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='admins'")
            table_exists = await cursor.fetchone()
            
            if not table_exists:
                print("‚ûï –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É admins...")
                await db.execute('''
                    CREATE TABLE admins (
                        telegram_id INTEGER PRIMARY KEY,
                        is_super_admin BOOLEAN DEFAULT FALSE,
                        added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ events
            cursor = await db.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='events'")
            events_table_exists = await cursor.fetchone()
            
            if not events_table_exists:
                print("‚ûï –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É events...")
                await db.execute('''
                    CREATE TABLE events (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT NOT NULL,
                        description TEXT NOT NULL,
                        is_active BOOLEAN DEFAULT TRUE,
                        created_by INTEGER NOT NULL,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (created_by) REFERENCES admins (telegram_id)
                    )
                ''')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ user_events
            cursor = await db.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='user_events'")
            user_events_table_exists = await cursor.fetchone()
            
            if not user_events_table_exists:
                print("‚ûï –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É user_events...")
                await db.execute('''
                    CREATE TABLE user_events (
                        user_id INTEGER NOT NULL,
                        event_id INTEGER NOT NULL,
                        joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        PRIMARY KEY (user_id, event_id),
                        FOREIGN KEY (user_id) REFERENCES users (id),
                        FOREIGN KEY (event_id) REFERENCES events (id) ON DELETE CASCADE
                    )
                ''')
            
            await db.commit()
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            await db.rollback()

async def reset_database():
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    if os.path.exists(DATABASE_URL):
        os.remove(DATABASE_URL)
        print("üóëÔ∏è –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –±–∞–∑—É
    from database import Database
    db = Database(DATABASE_URL)
    await db.init_db()
    
    print("‚úÖ –ù–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞!")

async def main():
    print("üõ†Ô∏è –£—Ç–∏–ª–∏—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ UniMeetingBot")
    print("=" * 40)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        print("2. –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (‚ö†Ô∏è –ø–æ—Ç–µ—Ä—è –¥–∞–Ω–Ω—ã—Ö)")
        print("3. –í—ã–π—Ç–∏")
        
        choice = input("\n–í–≤–æ–¥ (1-3): ").strip()
        
        if choice == "1":
            await migrate_database()
            break
        elif choice == "2":
            confirm = input("‚ö†Ô∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ").strip().lower()
            if confirm == "yes":
                await reset_database()
                break
            else:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        elif choice == "3":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    asyncio.run(main())
